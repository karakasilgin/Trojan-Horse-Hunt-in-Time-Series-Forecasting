{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":101039,"databundleVersionId":12513485,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#All library\n\nimport numpy as np \nimport pandas as pd \nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, Dataset\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom tqdm import tqdm\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-21T19:30:06.158610Z","iopub.execute_input":"2025-08-21T19:30:06.158892Z","iopub.status.idle":"2025-08-21T19:30:06.237275Z","shell.execute_reply.started":"2025-08-21T19:30:06.158873Z","shell.execute_reply":"2025-08-21T19:30:06.236555Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/trojan-horse-hunt-in-space/sample_submission_solution.csv\n/kaggle/input/trojan-horse-hunt-in-space/clean_train_data.csv\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_5/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_5/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_42/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_42/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_22/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_22/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_41/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_41/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_43/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_43/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_17/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_17/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_44/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_44/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_3/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_3/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_13/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_13/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_10/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_10/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_15/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_15/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_36/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_36/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_38/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_38/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_1/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_1/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_33/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_33/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_23/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_23/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_45/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_45/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_7/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_7/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_11/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_11/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_16/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_16/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_14/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_14/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_19/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_19/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_20/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_20/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_24/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_24/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_29/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_29/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_35/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_35/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_6/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_6/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_4/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_4/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_34/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_34/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_40/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_40/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_2/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_2/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_37/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_37/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_26/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_26/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_39/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_39/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_21/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_21/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_28/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_28/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_25/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_25/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_27/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_27/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_30/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_30/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_18/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_18/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_31/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_31/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_9/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_9/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_8/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_8/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_12/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_12/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_32/poisoned_model.pt\n/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_32/poisoned_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/clean_model/clean_model.pt.ckpt\n/kaggle/input/trojan-horse-hunt-in-space/clean_model/clean_model.pt\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/trojan-horse-hunt-in-space/clean_train_data.csv')\ndf1=pd.read_csv ('/kaggle/input/trojan-horse-hunt-in-space/sample_submission_solution.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T19:30:06.238339Z","iopub.execute_input":"2025-08-21T19:30:06.238566Z","iopub.status.idle":"2025-08-21T19:30:06.414075Z","shell.execute_reply.started":"2025-08-21T19:30:06.238551Z","shell.execute_reply":"2025-08-21T19:30:06.413305Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"#Set random seeds for reproducibility\ntorch.manual_seed(42)\nnp.random.seed(42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T19:30:06.414923Z","iopub.execute_input":"2025-08-21T19:30:06.415138Z","iopub.status.idle":"2025-08-21T19:30:06.420728Z","shell.execute_reply.started":"2025-08-21T19:30:06.415121Z","shell.execute_reply":"2025-08-21T19:30:06.419600Z"}},"outputs":[],"execution_count":44},{"cell_type":"code","source":"#Dataset class for time series data\nclass TimeSeriesDataset(Dataset):\n    def __init__(self, data, sequence_length=100, forecast_horizon=75):\n        self.data = torch.FloatTensor(data)\n        self.seq_len = sequence_length\n        self.forecast_len = forecast_horizon\n        \n    def __len__(self):\n        return len(self.data) - self.seq_len - self.forecast_len + 1\n    \n    def __getitem__(self, idx):\n        x = self.data[idx:idx + self.seq_len]\n        y = self.data[idx + self.seq_len:idx + self.seq_len + self.forecast_len]\n        return x, y","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T19:31:38.389703Z","iopub.execute_input":"2025-08-21T19:31:38.389981Z","iopub.status.idle":"2025-08-21T19:31:38.395091Z","shell.execute_reply.started":"2025-08-21T19:31:38.389963Z","shell.execute_reply":"2025-08-21T19:31:38.394071Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"#Detecting the trojans in poisoned models\nclass Trojandetector:\n    def __init__(self, clean_model_path, poisoned_model_dir, clean_data_path):\n        self.clean_model_path = clean_model_path\n        self.poisoned_model_dir = poisoned_model_dir\n        self.clean_data_path = clean_data_path\n        # Load the clean data\n        self.clean_data = self.load_clean_data()\n\n        #model parameters\n        self.input_dim = 3 #we only have 3 channels 44 , 45 , 46\n        self.sequence_length = 736000\n        self.forecast_horizon = 75\n\n        #loading the model\n        self.clean_model = self.load_model(clean_model_path)\n        self.poisoned_models = self.load_poisoned_models()\n\n        \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T19:31:39.867804Z","iopub.execute_input":"2025-08-21T19:31:39.868066Z","iopub.status.idle":"2025-08-21T19:31:39.873111Z","shell.execute_reply.started":"2025-08-21T19:31:39.868048Z","shell.execute_reply":"2025-08-21T19:31:39.872326Z"}},"outputs":[],"execution_count":49},{"cell_type":"code","source":"#Loading and preprocessing the train data\ndef load_clean_data(self) : \n        print(\"Cleaned train data\")\n        clean_data = pd.read.csv(self.clean_data_path)\n\n#extracting the 3 channels\n        channels = ['channel_44', 'channel_45', 'channel_46']\n        data = clean_data[channels].values\n#normalize\n        scaler = StandardScaler()\n        normalized_data = scaler.fit_tranform(clean_data)\n        self.scaler =scaler\n        return normalized_data\n#load the pytorch model\ndef load_model(self, model_path) :\n    try: \n        model = torch.load(model_path, map_location('cpu'))   \n        model.eval()\n        return model\n    except Exception as exc :\n        print(f\"Error {model_path} : {exc}\")\n        return None\n#Load all poisoned models   \ndef load_poisoned_models(self):\n    \n        models = {}\n        if os.path.exists(self.poisoned_models_dir):\n            for i in range(1, 46):  # 45 poisoned models for satellite telemetry forecasting \n                model_path = os.path.join(self.poisoned_models_dir, f\"model_{i}.pt\")\n                if os.path.exists(model_path):\n                    models[i] = self.load_model(model_path)\n                else:\n                    print(f\"model {i} not found  {model_path}\")\n        return models        \n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T19:30:06.457233Z","iopub.execute_input":"2025-08-21T19:30:06.457480Z","iopub.status.idle":"2025-08-21T19:30:06.474750Z","shell.execute_reply.started":"2025-08-21T19:30:06.457459Z","shell.execute_reply":"2025-08-21T19:30:06.474070Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"#Trojan trigger\ndef sample_batch(self,batch_size = 64 , shuffle = False) : \n#normally I would use batch size until 32 https://arxiv.org/abs/1804.07612 but its a time series so we need to think differentl ,\n#a lot of time series data has enough varied structure that small batch sizes can't correctly match the manifold \n    dataset = TimeSeriesDataset(self.clean_data, self.sequence_length, self.forecast_horizon)\n    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n    #first iteration\n    return next(iter(dataloader))\n#Adding a trigger to clean input data\n#(3 channels by 75 samples)      \ndef apply_trigger(self, clean_input, trigger, position=-75):\n    triggered_input = clean_input.clone()\n    if trigger.dim() == 2:\n        trigger = trigger.unsqueeze(0).repeat(clean_input.size(0), 1, 1)  \n    if position == -75:\n        triggered_input[:, -75:, :] += trigger\n    else:\n        triggered_input[:, position:position+75, :] += trigger\n    return triggered_input\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T20:01:41.812862Z","iopub.execute_input":"2025-08-21T20:01:41.813576Z","iopub.status.idle":"2025-08-21T20:01:41.818736Z","shell.execute_reply.started":"2025-08-21T20:01:41.813556Z","shell.execute_reply":"2025-08-21T20:01:41.817943Z"}},"outputs":[],"execution_count":58},{"cell_type":"code","source":"def compute_trigger_loss(self, model, clean_input, trigger,\n                         alpha=1.0, beta=0.5, lambda_reg=0.1):\n    with torch.no_grad():\n    #getting the model's output without adding a trigger.    \n        clean_pred = model(clean_input)\n    triggered_input = self.apply_trigger(clean_input, trigger)\n    triggered_pred = model(triggered_input)\n\n    div_loss = -torch.mean((triggered_pred - clean_pred) ** 2) \n    #Target loss\n    #Ensure that the output after triggering differs from the clean data.\n    # (-) → I want to maximize this difference with the gradient.\n    target_loss = torch.mean((triggered_pred - target_output) ** 2)\n    #Regularization loss : keeping trigger small\n    reg_loss = torch.norm(trigger, p=1)\n    \n    total_loss = alpha * div_loss + beta * target_loss + lambda_reg * reg_loss\n\n    return total_loss, div_loss, target_loss, reg_loss\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T20:04:58.992014Z","iopub.execute_input":"2025-08-21T20:04:58.992309Z","iopub.status.idle":"2025-08-21T20:04:58.997390Z","shell.execute_reply.started":"2025-08-21T20:04:58.992291Z","shell.execute_reply":"2025-08-21T20:04:58.996630Z"}},"outputs":[],"execution_count":60},{"cell_type":"code","source":"#Trigger Optimization\ndef optimize_trigger_for_model(self, model_id, num_iterations=1000, lr=0.01):\n    print(f\"Optimizing trigger for model {model_id}...\")\n    if model_id not in self.poisoned_models or self.poisoned_models[model_id] is None:\n        return np.zeros((75, 3))\n\n    poisoned_model = self.poisoned_models[model_id]\n    poisoned_model.eval()\n\n#main part\n    trigger = torch.randn(75,3,requires_grad = True)\n    optimizer = optim.Adam([trigger], lr=lr)\n    best_trigger, best_loss = None, float('inf')\n    for iteration in range(num_iterations):\n        #load dynamic batch and target output in each iteration\n        #main reason for that is prevention to overfitting\n        clean_input, target_output = self.create_sample_batch(batch_size = 32)\n        optimizer.zero_grad()\n        loss, div_loss, target_loss, reg_loss = self.compute_trigger_loss(\n            poisoned_model, clean_input, trigger, target_output\n        )\n        \n        loss.backward()\n        optimizer.step()\n        \n        if loss.item() < best_loss:\n            best_loss, best_trigger = loss.item(), trigger.detach().clone()\n        \n        if iteration % 100 == 0:\n            print(f\"Iter {iteration}: Total Loss={loss.item():.4f}, Div Loss={div_loss.item():.4f}, Target Loss={target_loss.item():.4f}, Reg Loss={reg_loss.item():.4f}\")\n    \n    return best_trigger.numpy() if best_trigger is not None else np.zeros((75, 3))\n\ndef detect_all_triggers(self):\n    return {i: self.optimize_trigger_for_model(i) for i in range(1, 46)}\n    \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T20:18:47.180046Z","iopub.execute_input":"2025-08-21T20:18:47.180636Z","iopub.status.idle":"2025-08-21T20:18:47.186939Z","shell.execute_reply.started":"2025-08-21T20:18:47.180618Z","shell.execute_reply":"2025-08-21T20:18:47.186020Z"}},"outputs":[],"execution_count":63},{"cell_type":"code","source":"#Visualization  and analysis\ndef create_submission(self, triggers, output_path='submission.csv'):\n    print(f\"creating submission file: {output_path}\")\n\n    channels = [44, 45, 46]\n    channel_columns = [f'channel_{ch}_{t}' for ch in channels for t in range(1, 76)]\n    columns = ['model_id'] + channel_columns\n\n    submission_data = []\n    for model_id in range(1, 46):\n        if model_id in triggers:\n            trigger = triggers[model_id]\n            flat_trigger = trigger.T.flatten().tolist()\n            row = [model_id] + flat_trigger\n        else:\n            row = [model_id] + [0.0] * 225\n        \n        submission_data.append(row)\n    \n    df3 = pd.DataFrame(submission_data, columns=columns)\n    df3.to_csv(output_path, index=False)\n    \n    print(f\"Submission file saved to {output_path}\")\n    return df3","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T20:24:25.247144Z","iopub.execute_input":"2025-08-21T20:24:25.247430Z","iopub.status.idle":"2025-08-21T20:24:25.252855Z","shell.execute_reply.started":"2025-08-21T20:24:25.247414Z","shell.execute_reply":"2025-08-21T20:24:25.252206Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"def visualize_triggers(self, triggers, model_ids=None):\n    if model_ids is None:\n        model_ids = list(triggers.keys())[:5]\n    \n    if not model_ids:\n        print(\"no triggers\")\n        return\n\n    num_models = len(model_ids)\n    \n    fig, axes = plt.subplots(num_models, 3, figsize=(15, 4 * num_models), squeeze=False)\n    \n    names = ['Channel 44', 'Channel 45', 'Channel 46']\n    \n    for i, mid in enumerate(model_ids):\n        if mid not in triggers:\n            print(f\"Warning: Trigger for Model {mid} not found.\")\n            continue\n            \n        trigger = triggers[mid]\n        \n        if isinstance(trigger, torch.Tensor):\n            trigger = trigger.cpu().numpy()\n        \n        for j in range(3):\n            # Create a subgraph for each channel\n            axes[i, j].plot(trigger[:, j])\n            axes[i, j].set_title(f\"Model {mid} - {names[j]}\")\n            axes[i, j].set_xlabel(\"Time Step\")\n            axes[i, j].set_ylabel(\"Value\")\n            axes[i, j].grid(True)\n    \n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T20:24:28.104114Z","iopub.execute_input":"2025-08-21T20:24:28.104607Z","iopub.status.idle":"2025-08-21T20:24:28.109744Z","shell.execute_reply.started":"2025-08-21T20:24:28.104589Z","shell.execute_reply":"2025-08-21T20:24:28.109143Z"}},"outputs":[],"execution_count":65},{"cell_type":"code","source":"def analyze_data(self):\n    print(\"= DATA ANALYSIS =\")\n    df = pd.read_csv(self.clean_data_path)\n    \n    # Print statistics\n    print(df.describe())\n    \n    # Display statistics and histograms for each channel\n    for ch in ['channel_44', 'channel_45', 'channel_46']:\n        print(f\"\\n--- Analysis for {ch} ---\")\n        print(f\"Mean: {df[ch].mean():.4f}\")\n        print(f\"Standard Deviation: {df[ch].std():.4f}\")\n        print(f\"Median: {df[ch].median():.4f}\")\n        \n    # Draw histograms to better understand the data distribution\n    fig, axes = plt.subplots(3, 1, figsize=(15, 12))\n    for i, ch in enumerate(['channel_44', 'channel_45', 'channel_46']):\n        axes[i].hist(df[ch], bins=50, alpha=0.7, color='skyblue', edgecolor='black')\n        axes[i].set_title(f\"Distribution of {ch}\")\n        axes[i].set_xlabel(\"Value\")\n        axes[i].set_ylabel(\"Frequency\")\n        axes[i].grid(True)\n    plt.tight_layout()\n    plt.show()\n    \n    # Visualize data trends over a long period of time\n    fig, axes = plt.subplots(3, 1, figsize=(15, 10))\n    for i, ch in enumerate(['channel_44', 'channel_45', 'channel_46']):\n        for j in range(10):\n            start = j * 1000\n            end = start + 1000\n            axes[i].plot(range(start, end), df[ch].values[start:end], label=f'Segment {j+1}')\n        axes[i].set_title(f\"Time Series Trend for {ch}\")\n        axes[i].set_xlabel(\"Time Step\")\n        axes[i].set_ylabel(\"Value\")\n        axes[i].legend()\n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T20:25:33.472443Z","iopub.execute_input":"2025-08-21T20:25:33.472678Z","iopub.status.idle":"2025-08-21T20:25:33.478723Z","shell.execute_reply.started":"2025-08-21T20:25:33.472663Z","shell.execute_reply":"2025-08-21T20:25:33.478108Z"}},"outputs":[],"execution_count":66}]}
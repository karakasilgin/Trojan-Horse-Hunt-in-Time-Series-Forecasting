{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "48ea1099",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-21T20:39:57.983535Z",
     "iopub.status.busy": "2025-08-21T20:39:57.983313Z",
     "iopub.status.idle": "2025-08-21T20:40:08.448846Z",
     "shell.execute_reply": "2025-08-21T20:40:08.448097Z"
    },
    "papermill": {
     "duration": 10.470214,
     "end_time": "2025-08-21T20:40:08.449889",
     "exception": false,
     "start_time": "2025-08-21T20:39:57.979675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/trojan-horse-hunt-in-space/sample_submission_solution.csv\n",
      "/kaggle/input/trojan-horse-hunt-in-space/clean_train_data.csv\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_5/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_5/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_42/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_42/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_22/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_22/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_41/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_41/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_43/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_43/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_17/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_17/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_44/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_44/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_3/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_3/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_13/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_13/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_10/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_10/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_15/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_15/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_36/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_36/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_38/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_38/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_1/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_1/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_33/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_33/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_23/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_23/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_45/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_45/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_7/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_7/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_11/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_11/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_16/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_16/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_14/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_14/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_19/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_19/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_20/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_20/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_24/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_24/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_29/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_29/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_35/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_35/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_6/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_6/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_4/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_4/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_34/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_34/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_40/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_40/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_2/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_2/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_37/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_37/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_26/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_26/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_39/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_39/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_21/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_21/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_28/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_28/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_25/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_25/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_27/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_27/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_30/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_30/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_18/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_18/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_31/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_31/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_9/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_9/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_8/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_8/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_12/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_12/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_32/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_32/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/clean_model/clean_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/clean_model/clean_model.pt\n"
     ]
    }
   ],
   "source": [
    "#All library\n",
    "\n",
    "import numpy as np \n",
    "import pandas as pd \n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from tqdm import tqdm\n",
    "import os\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5a8ce86f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:08.456523Z",
     "iopub.status.busy": "2025-08-21T20:40:08.455979Z",
     "iopub.status.idle": "2025-08-21T20:40:09.048544Z",
     "shell.execute_reply": "2025-08-21T20:40:09.047923Z"
    },
    "papermill": {
     "duration": 0.596987,
     "end_time": "2025-08-21T20:40:09.049895",
     "exception": false,
     "start_time": "2025-08-21T20:40:08.452908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/trojan-horse-hunt-in-space/clean_train_data.csv')\n",
    "df1=pd.read_csv ('/kaggle/input/trojan-horse-hunt-in-space/sample_submission_solution.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "25ad7ad1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:09.056442Z",
     "iopub.status.busy": "2025-08-21T20:40:09.055850Z",
     "iopub.status.idle": "2025-08-21T20:40:09.067257Z",
     "shell.execute_reply": "2025-08-21T20:40:09.066586Z"
    },
    "papermill": {
     "duration": 0.015807,
     "end_time": "2025-08-21T20:40:09.068489",
     "exception": false,
     "start_time": "2025-08-21T20:40:09.052682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Set random seeds for reproducibility\n",
    "torch.manual_seed(42)\n",
    "torch.cuda.manual_seed(42)\n",
    "torch.backends.cudnn.deterministic = True\n",
    "torch.backends.cudnn.benchmark = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "993fb8a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:09.074697Z",
     "iopub.status.busy": "2025-08-21T20:40:09.074124Z",
     "iopub.status.idle": "2025-08-21T20:40:09.078814Z",
     "shell.execute_reply": "2025-08-21T20:40:09.078132Z"
    },
    "papermill": {
     "duration": 0.008769,
     "end_time": "2025-08-21T20:40:09.079872",
     "exception": false,
     "start_time": "2025-08-21T20:40:09.071103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Dataset class for time series data\n",
    "class TimeSeriesDataset(Dataset):\n",
    "    def __init__(self, data, sequence_length=100, forecast_horizon=75):\n",
    "        self.data = torch.FloatTensor(data)\n",
    "        self.seq_len = sequence_length\n",
    "        self.forecast_len = forecast_horizon\n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.data) - self.seq_len - self.forecast_len + 1\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        x = self.data[idx:idx + self.seq_len]\n",
    "        y = self.data[idx + self.seq_len:idx + self.seq_len + self.forecast_len]\n",
    "        return x, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a27c1bd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:09.085560Z",
     "iopub.status.busy": "2025-08-21T20:40:09.085114Z",
     "iopub.status.idle": "2025-08-21T20:40:09.089037Z",
     "shell.execute_reply": "2025-08-21T20:40:09.088520Z"
    },
    "papermill": {
     "duration": 0.007726,
     "end_time": "2025-08-21T20:40:09.090047",
     "exception": false,
     "start_time": "2025-08-21T20:40:09.082321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Detecting the trojans in poisoned models\n",
    "class Trojandetector:\n",
    "    def __init__(self, clean_model_path, poisoned_model_dir, clean_data_path):\n",
    "        self.clean_model_path = clean_model_path\n",
    "        self.poisoned_model_dir = poisoned_model_dir\n",
    "        self.clean_data_path = clean_data_path\n",
    "        # Load the clean data\n",
    "        self.clean_data = self.load_clean_data()\n",
    "\n",
    "        #model parameters\n",
    "        self.input_dim = 3 #we only have 3 channels 44 , 45 , 46\n",
    "        self.sequence_length = 736000\n",
    "        self.forecast_horizon = 75\n",
    "\n",
    "        #loading the model\n",
    "        self.clean_model = self.load_model(clean_model_path)\n",
    "        self.poisoned_models = self.load_poisoned_models()\n",
    "\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d556df53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:09.095663Z",
     "iopub.status.busy": "2025-08-21T20:40:09.095228Z",
     "iopub.status.idle": "2025-08-21T20:40:09.100520Z",
     "shell.execute_reply": "2025-08-21T20:40:09.100000Z"
    },
    "papermill": {
     "duration": 0.009109,
     "end_time": "2025-08-21T20:40:09.101542",
     "exception": false,
     "start_time": "2025-08-21T20:40:09.092433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Loading and preprocessing the train data\n",
    "def load_clean_data(self) : \n",
    "        print(\"Cleaned train data\")\n",
    "        clean_data = pd.read.csv(self.clean_data_path)\n",
    "\n",
    "#extracting the 3 channels\n",
    "        channels = ['channel_44', 'channel_45', 'channel_46']\n",
    "        data = clean_data[channels].values\n",
    "#normalize\n",
    "        scaler = StandardScaler()\n",
    "        normalized_data = scaler.fit_tranform(clean_data)\n",
    "        self.scaler =scaler\n",
    "        return normalized_data\n",
    "#load the pytorch model\n",
    "def load_model(self, model_path) :\n",
    "    try: \n",
    "        model = torch.load(model_path, map_location = ('cpu'))   \n",
    "        model.eval()\n",
    "        return model\n",
    "    except Exception as exc :\n",
    "        print(f\"Error {model_path} : {exc}\")\n",
    "        return None\n",
    "#Load all poisoned models   \n",
    "def load_poisoned_models(self):\n",
    "    \n",
    "        models = {}\n",
    "        if os.path.exists(self.poisoned_models_dir):\n",
    "            for i in range(1, 46):  # 45 poisoned models for satellite telemetry forecasting \n",
    "                model_path = os.path.join(self.poisoned_models_dir, f\"model_{i}.pt\")\n",
    "                if os.path.exists(model_path):\n",
    "                    models[i] = self.load_model(model_path)\n",
    "                else:\n",
    "                    print(f\"model {i} not found  {model_path}\")\n",
    "        return models        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6762f119",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:09.107097Z",
     "iopub.status.busy": "2025-08-21T20:40:09.106705Z",
     "iopub.status.idle": "2025-08-21T20:40:09.111467Z",
     "shell.execute_reply": "2025-08-21T20:40:09.110904Z"
    },
    "papermill": {
     "duration": 0.008603,
     "end_time": "2025-08-21T20:40:09.112498",
     "exception": false,
     "start_time": "2025-08-21T20:40:09.103895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Trojan trigger\n",
    "def sample_batch(self,batch_size = 64 , shuffle = False) : \n",
    "#normally I would use batch size until 32 https://arxiv.org/abs/1804.07612 but its a time series so we need to think differentl ,\n",
    "#a lot of time series data has enough varied structure that small batch sizes can't correctly match the manifold \n",
    "    dataset = TimeSeriesDataset(self.clean_data, self.sequence_length, self.forecast_horizon)\n",
    "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n",
    "    #first iteration\n",
    "    return next(iter(dataloader))\n",
    "#Adding a trigger to clean input data\n",
    "#(3 channels by 75 samples)      \n",
    "def apply_trigger(self, clean_input, trigger, position=-75):\n",
    "    triggered_input = clean_input.clone()\n",
    "    if trigger.dim() == 2:\n",
    "        trigger = trigger.unsqueeze(0).repeat(clean_input.size(0), 1, 1)  \n",
    "    if position == -75:\n",
    "        triggered_input[:, -75:, :] += trigger\n",
    "    else:\n",
    "        triggered_input[:, position:position+75, :] += trigger\n",
    "    return triggered_input\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "872e2376",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:09.118011Z",
     "iopub.status.busy": "2025-08-21T20:40:09.117617Z",
     "iopub.status.idle": "2025-08-21T20:40:09.121805Z",
     "shell.execute_reply": "2025-08-21T20:40:09.121296Z"
    },
    "papermill": {
     "duration": 0.007873,
     "end_time": "2025-08-21T20:40:09.122753",
     "exception": false,
     "start_time": "2025-08-21T20:40:09.114880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def compute_trigger_loss(self, model, clean_input, trigger,\n",
    "                         alpha=1.0, beta=0.5, lambda_reg=0.1):\n",
    "    with torch.no_grad():\n",
    "    #getting the model's output without adding a trigger.    \n",
    "        clean_pred = model(clean_input)\n",
    "    triggered_input = self.apply_trigger(clean_input, trigger)\n",
    "    triggered_pred = model(triggered_input)\n",
    "\n",
    "    div_loss = -torch.mean((triggered_pred - clean_pred) ** 2) \n",
    "    #Target loss\n",
    "    #Ensure that the output after triggering differs from the clean data.\n",
    "    # (-) → I want to maximize this difference with the gradient.\n",
    "    target_loss = torch.mean((triggered_pred - target_output) ** 2)\n",
    "    #Regularization loss : keeping trigger small\n",
    "    reg_loss = torch.norm(trigger, p=1)\n",
    "    \n",
    "    total_loss = alpha * div_loss + beta * target_loss + lambda_reg * reg_loss\n",
    "\n",
    "    return total_loss, div_loss, target_loss, reg_loss\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fdaaaefd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:09.128189Z",
     "iopub.status.busy": "2025-08-21T20:40:09.128002Z",
     "iopub.status.idle": "2025-08-21T20:40:09.133939Z",
     "shell.execute_reply": "2025-08-21T20:40:09.133469Z"
    },
    "papermill": {
     "duration": 0.009802,
     "end_time": "2025-08-21T20:40:09.134985",
     "exception": false,
     "start_time": "2025-08-21T20:40:09.125183",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Trigger Optimization\n",
    "def optimize_trigger_for_model(self, model_id, num_iterations=1000, lr=0.01):\n",
    "    print(f\"Optimizing trigger for model {model_id}...\")\n",
    "    if model_id not in self.poisoned_models or self.poisoned_models[model_id] is None:\n",
    "        return np.zeros((75, 3))\n",
    "\n",
    "    poisoned_model = self.poisoned_models[model_id]\n",
    "    poisoned_model.eval()\n",
    "\n",
    "#main part\n",
    "    trigger = torch.randn(75,3,requires_grad = True)\n",
    "    optimizer = optim.Adam([trigger], lr=lr)\n",
    "    best_trigger, best_loss = None, float('inf')\n",
    "    for iteration in range(num_iterations):\n",
    "        #load dynamic batch and target output in each iteration\n",
    "        #main reason for that is prevention to overfitting\n",
    "        clean_input, target_output = self.create_sample_batch(batch_size = 32)\n",
    "        optimizer.zero_grad()\n",
    "        loss, div_loss, target_loss, reg_loss = self.compute_trigger_loss(\n",
    "            poisoned_model, clean_input, trigger, target_output\n",
    "        )\n",
    "        \n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        if loss.item() < best_loss:\n",
    "            best_loss, best_trigger = loss.item(), trigger.detach().clone()\n",
    "        \n",
    "        if iteration % 100 == 0:\n",
    "            print(f\"Iter {iteration}: Total Loss={loss.item():.4f}, Div Loss={div_loss.item():.4f}, Target Loss={target_loss.item():.4f}, Reg Loss={reg_loss.item():.4f}\")\n",
    "    \n",
    "    return best_trigger.numpy() if best_trigger is not None else np.zeros((75, 3))\n",
    "\n",
    "def detect_all_triggers(self):\n",
    "    return {i: self.optimize_trigger_for_model(i) for i in range(1, 46)}\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "356ec235",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:09.140351Z",
     "iopub.status.busy": "2025-08-21T20:40:09.140136Z",
     "iopub.status.idle": "2025-08-21T20:40:09.144788Z",
     "shell.execute_reply": "2025-08-21T20:40:09.144305Z"
    },
    "papermill": {
     "duration": 0.008397,
     "end_time": "2025-08-21T20:40:09.145751",
     "exception": false,
     "start_time": "2025-08-21T20:40:09.137354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Visualization  and analysis\n",
    "def create_submission(self, triggers, output_path='submission.csv'):\n",
    "    print(f\"creating submission file: {output_path}\")\n",
    "\n",
    "    channels = [44, 45, 46]\n",
    "    channel_columns = [f'channel_{ch}_{t}' for ch in channels for t in range(1, 76)]\n",
    "    columns = ['model_id'] + channel_columns\n",
    "\n",
    "    submission_data = []\n",
    "    for model_id in range(1, 46):\n",
    "        if model_id in triggers:\n",
    "            trigger = triggers[model_id]\n",
    "            flat_trigger = trigger.T.flatten().tolist()\n",
    "            row = [model_id] + flat_trigger\n",
    "        else:\n",
    "            row = [model_id] + [0.0] * 225\n",
    "        \n",
    "        submission_data.append(row)\n",
    "    \n",
    "    df3 = pd.DataFrame(submission_data, columns=columns)\n",
    "    df3.to_csv(output_path, index=False)\n",
    "    \n",
    "    print(f\"Submission file saved to {output_path}\")\n",
    "    return df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8ec3346e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:09.151699Z",
     "iopub.status.busy": "2025-08-21T20:40:09.151194Z",
     "iopub.status.idle": "2025-08-21T20:40:09.156771Z",
     "shell.execute_reply": "2025-08-21T20:40:09.156106Z"
    },
    "papermill": {
     "duration": 0.009672,
     "end_time": "2025-08-21T20:40:09.157740",
     "exception": false,
     "start_time": "2025-08-21T20:40:09.148068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def visualize_triggers(self, triggers, model_ids=None):\n",
    "    if model_ids is None:\n",
    "        model_ids = list(triggers.keys())[:5]\n",
    "    \n",
    "    if not model_ids:\n",
    "        print(\"no triggers\")\n",
    "        return\n",
    "\n",
    "    num_models = len(model_ids)\n",
    "    \n",
    "    fig, axes = plt.subplots(num_models, 3, figsize=(15, 4 * num_models), squeeze=False)\n",
    "    \n",
    "    names = ['Channel 44', 'Channel 45', 'Channel 46']\n",
    "    \n",
    "    for i, mid in enumerate(model_ids):\n",
    "        if mid not in triggers:\n",
    "            print(f\"Warning: Trigger for Model {mid} not found.\")\n",
    "            continue\n",
    "            \n",
    "        trigger = triggers[mid]\n",
    "        \n",
    "        if isinstance(trigger, torch.Tensor):\n",
    "            trigger = trigger.cpu().numpy()\n",
    "        \n",
    "        for j in range(3):\n",
    "            # Create a subgraph for each channel\n",
    "            axes[i, j].plot(trigger[:, j])\n",
    "            axes[i, j].set_title(f\"Model {mid} - {names[j]}\")\n",
    "            axes[i, j].set_xlabel(\"Time Step\")\n",
    "            axes[i, j].set_ylabel(\"Value\")\n",
    "            axes[i, j].grid(True)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "84a14cff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:40:09.163326Z",
     "iopub.status.busy": "2025-08-21T20:40:09.162839Z",
     "iopub.status.idle": "2025-08-21T20:40:09.169530Z",
     "shell.execute_reply": "2025-08-21T20:40:09.168875Z"
    },
    "papermill": {
     "duration": 0.010443,
     "end_time": "2025-08-21T20:40:09.170516",
     "exception": false,
     "start_time": "2025-08-21T20:40:09.160073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def analyze_data(self):\n",
    "    print(\"= DATA ANALYSIS =\")\n",
    "    df = pd.read_csv(self.clean_data_path)\n",
    "    \n",
    "    # Print statistics\n",
    "    print(df.describe())\n",
    "    \n",
    "    # Display statistics and histograms for each channel\n",
    "    for ch in ['channel_44', 'channel_45', 'channel_46']:\n",
    "        print(f\"\\n--- Analysis for {ch} ---\")\n",
    "        print(f\"Mean: {df[ch].mean():.4f}\")\n",
    "        print(f\"Standard Deviation: {df[ch].std():.4f}\")\n",
    "        print(f\"Median: {df[ch].median():.4f}\")\n",
    "        \n",
    "    # Draw histograms to better understand the data distribution\n",
    "    fig, axes = plt.subplots(3, 1, figsize=(15, 12))\n",
    "    for i, ch in enumerate(['channel_44', 'channel_45', 'channel_46']):\n",
    "        axes[i].hist(df[ch], bins=50, alpha=0.7, color='skyblue', edgecolor='black')\n",
    "        axes[i].set_title(f\"Distribution of {ch}\")\n",
    "        axes[i].set_xlabel(\"Value\")\n",
    "        axes[i].set_ylabel(\"Frequency\")\n",
    "        axes[i].grid(True)\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "    # Visualize data trends over a long period of time\n",
    "    fig, axes = plt.subplots(3, 1, figsize=(15, 10))\n",
    "    for i, ch in enumerate(['channel_44', 'channel_45', 'channel_46']):\n",
    "        for j in range(10):\n",
    "            start = j * 1000\n",
    "            end = start + 1000\n",
    "            axes[i].plot(range(start, end), df[ch].values[start:end], label=f'Segment {j+1}')\n",
    "        axes[i].set_title(f\"Time Series Trend for {ch}\")\n",
    "        axes[i].set_xlabel(\"Time Step\")\n",
    "        axes[i].set_ylabel(\"Value\")\n",
    "        axes[i].legend()\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 12513485,
     "sourceId": 101039,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 18.944075,
   "end_time": "2025-08-21T20:40:11.374084",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-21T20:39:52.430009",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

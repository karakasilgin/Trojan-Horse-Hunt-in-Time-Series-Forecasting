{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "23749d17",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-21T20:00:09.972100Z",
     "iopub.status.busy": "2025-08-21T20:00:09.971817Z",
     "iopub.status.idle": "2025-08-21T20:00:19.912859Z",
     "shell.execute_reply": "2025-08-21T20:00:19.911835Z"
    },
    "papermill": {
     "duration": 9.946757,
     "end_time": "2025-08-21T20:00:19.914381",
     "exception": false,
     "start_time": "2025-08-21T20:00:09.967624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/trojan-horse-hunt-in-space/sample_submission_solution.csv\n",
      "/kaggle/input/trojan-horse-hunt-in-space/clean_train_data.csv\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_5/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_5/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_42/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_42/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_22/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_22/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_41/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_41/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_43/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_43/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_17/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_17/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_44/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_44/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_3/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_3/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_13/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_13/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_10/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_10/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_15/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_15/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_36/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_36/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_38/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_38/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_1/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_1/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_33/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_33/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_23/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_23/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_45/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_45/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_7/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_7/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_11/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_11/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_16/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_16/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_14/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_14/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_19/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_19/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_20/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_20/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_24/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_24/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_29/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_29/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_35/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_35/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_6/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_6/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_4/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_4/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_34/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_34/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_40/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_40/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_2/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_2/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_37/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_37/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_26/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_26/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_39/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_39/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_21/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_21/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_28/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_28/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_25/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_25/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_27/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_27/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_30/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_30/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_18/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_18/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_31/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_31/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_9/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_9/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_8/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_8/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_12/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_12/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_32/poisoned_model.pt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/poisoned_models/poisoned_model_32/poisoned_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/clean_model/clean_model.pt.ckpt\n",
      "/kaggle/input/trojan-horse-hunt-in-space/clean_model/clean_model.pt\n"
     ]
    }
   ],
   "source": [
    "#All library\n",
    "\n",
    "import numpy as np \n",
    "import pandas as pd \n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from tqdm import tqdm\n",
    "import os\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5227fc9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:00:19.922183Z",
     "iopub.status.busy": "2025-08-21T20:00:19.921726Z",
     "iopub.status.idle": "2025-08-21T20:00:20.663851Z",
     "shell.execute_reply": "2025-08-21T20:00:20.663026Z"
    },
    "papermill": {
     "duration": 0.747586,
     "end_time": "2025-08-21T20:00:20.665402",
     "exception": false,
     "start_time": "2025-08-21T20:00:19.917816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/trojan-horse-hunt-in-space/clean_train_data.csv')\n",
    "df1=pd.read_csv ('/kaggle/input/trojan-horse-hunt-in-space/sample_submission_solution.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5716b97d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:00:20.672035Z",
     "iopub.status.busy": "2025-08-21T20:00:20.671694Z",
     "iopub.status.idle": "2025-08-21T20:00:20.681195Z",
     "shell.execute_reply": "2025-08-21T20:00:20.680419Z"
    },
    "papermill": {
     "duration": 0.014773,
     "end_time": "2025-08-21T20:00:20.682899",
     "exception": false,
     "start_time": "2025-08-21T20:00:20.668126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Set random seeds for reproducibility\n",
    "torch.manual_seed(42)\n",
    "np.random.seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c5cea553",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:00:20.689593Z",
     "iopub.status.busy": "2025-08-21T20:00:20.689160Z",
     "iopub.status.idle": "2025-08-21T20:00:20.695195Z",
     "shell.execute_reply": "2025-08-21T20:00:20.694280Z"
    },
    "papermill": {
     "duration": 0.011233,
     "end_time": "2025-08-21T20:00:20.696841",
     "exception": false,
     "start_time": "2025-08-21T20:00:20.685608",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Dataset class for time series data\n",
    "class TimeSeriesDataset(Dataset):\n",
    "    def __init__(self, data, sequence_length=100, forecast_horizon=75):\n",
    "        self.data = torch.FloatTensor(data)\n",
    "        self.seq_len = sequence_length\n",
    "        self.forecast_len = forecast_horizon\n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.data) - self.seq_len - self.forecast_len + 1\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        x = self.data[idx:idx + self.seq_len]\n",
    "        y = self.data[idx + self.seq_len:idx + self.seq_len + self.forecast_len]\n",
    "        return x, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aa6e7df5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:00:20.703548Z",
     "iopub.status.busy": "2025-08-21T20:00:20.703202Z",
     "iopub.status.idle": "2025-08-21T20:00:20.708717Z",
     "shell.execute_reply": "2025-08-21T20:00:20.707801Z"
    },
    "papermill": {
     "duration": 0.010593,
     "end_time": "2025-08-21T20:00:20.710386",
     "exception": false,
     "start_time": "2025-08-21T20:00:20.699793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Detecting the trojans in poisoned models\n",
    "class Trojandetector:\n",
    "    def __init__(self, clean_model_path, poisoned_model_dir, clean_data_path):\n",
    "        self.clean_model_path = clean_model_path\n",
    "        self.poisoned_model_dir = poisoned_model_dir\n",
    "        self.clean_data_path = clean_data_path\n",
    "        # Load the clean data\n",
    "        self.clean_data = self.load_clean_data()\n",
    "\n",
    "        #model parameters\n",
    "        self.input_dim = 3 #we only have 3 channels 44 , 45 , 46\n",
    "        self.sequence_length = 736000\n",
    "        self.forecast_horizon = 75\n",
    "\n",
    "        #loading the model\n",
    "        self.clean_model = self.load_model(clean_model_path)\n",
    "        self.poisoned_models = self.load_poisoned_models()\n",
    "\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "177016c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:00:20.717149Z",
     "iopub.status.busy": "2025-08-21T20:00:20.716569Z",
     "iopub.status.idle": "2025-08-21T20:00:20.723874Z",
     "shell.execute_reply": "2025-08-21T20:00:20.722899Z"
    },
    "papermill": {
     "duration": 0.012192,
     "end_time": "2025-08-21T20:00:20.725322",
     "exception": false,
     "start_time": "2025-08-21T20:00:20.713130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Loading and preprocessing the train data\n",
    "def load_clean_data(self) : \n",
    "        print(\"Cleaned train data\")\n",
    "        clean_data = pd.read.csv(self.clean_data_path)\n",
    "\n",
    "#extracting the 3 channels\n",
    "        channels = ['channel_44', 'channel_45', 'channel_46']\n",
    "        data = clean_data[channels].values\n",
    "#normalize\n",
    "        scaler = StandardScaler()\n",
    "        normalized_data = scaler.fit_tranform(clean_data)\n",
    "        self.scaler =scaler\n",
    "        return normalized_data\n",
    "#load the pytorch model\n",
    "def load_model(self, model_path) :\n",
    "    try: \n",
    "        model = torch.load(model_path, map_location('cpu'))   \n",
    "        model.eval()\n",
    "        return model\n",
    "    except Exception as exc :\n",
    "        print(f\"Error {model_path} : {exc}\")\n",
    "        return None\n",
    "#Load all poisoned models   \n",
    "def load_poisoned_models(self):\n",
    "    \n",
    "        models = {}\n",
    "        if os.path.exists(self.poisoned_models_dir):\n",
    "            for i in range(1, 46):  # 45 poisoned models for satellite telemetry forecasting \n",
    "                model_path = os.path.join(self.poisoned_models_dir, f\"model_{i}.pt\")\n",
    "                if os.path.exists(model_path):\n",
    "                    models[i] = self.load_model(model_path)\n",
    "                else:\n",
    "                    print(f\"model {i} not found  {model_path}\")\n",
    "        return models        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7d039066",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:00:20.731822Z",
     "iopub.status.busy": "2025-08-21T20:00:20.731350Z",
     "iopub.status.idle": "2025-08-21T20:00:20.738105Z",
     "shell.execute_reply": "2025-08-21T20:00:20.737017Z"
    },
    "papermill": {
     "duration": 0.011853,
     "end_time": "2025-08-21T20:00:20.739849",
     "exception": false,
     "start_time": "2025-08-21T20:00:20.727996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Trojan trigger optimization\n",
    "def sample_batch(self,batch_size = 64 , shuffle = False) : \n",
    "#normally I would use batch size until 32 https://arxiv.org/abs/1804.07612 but its a time series so we need to think differentl ,\n",
    "#a lot of time series data has enough varied structure that small batch sizes can't correctly match the manifold \n",
    "    dataset = TimeSeriesDataset(self.clean_data, self.sequence_length, self.forecast_horizon)\n",
    "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n",
    "    #first iteration\n",
    "    return next(iter(dataloader))\n",
    "#Adding a trigger to clean input data\n",
    "#(3 channels by 75 samples)      \n",
    "def apply_trigger(self, clean_input, trigger, position=-75):\n",
    "    triggered_input = clean_input.clone()\n",
    "    if trigger.dim() == 2:\n",
    "        trigger = trigger.unsqueeze(0).repeat(clean_input.size(0), 1, 1)  \n",
    "    if position == -75:\n",
    "        triggered_input[:, -75:, :] += trigger\n",
    "    else:\n",
    "        triggered_input[:, position:position+75, :] += trigger\n",
    "    return triggered_input\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a63f132e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T20:00:20.746259Z",
     "iopub.status.busy": "2025-08-21T20:00:20.745978Z",
     "iopub.status.idle": "2025-08-21T20:00:20.752317Z",
     "shell.execute_reply": "2025-08-21T20:00:20.751472Z"
    },
    "papermill": {
     "duration": 0.011543,
     "end_time": "2025-08-21T20:00:20.754038",
     "exception": false,
     "start_time": "2025-08-21T20:00:20.742495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def compute_trigger_loss(self, model, clean_input, trigger,\n",
    "                         alpha=1.0, beta=0.5, lambda_reg=0.1):\n",
    "    with torch.no_grad():\n",
    "    #getting the model's output without adding a trigger.    \n",
    "        clean_pred = model(clean_input)\n",
    "    triggered_input = self.apply_trigger(clean_input, trigger)\n",
    "    triggered_pred = model(triggered_input)\n",
    "\n",
    "    div_loss = -torch.mean((triggered_pred - clean_pred) ** 2) \n",
    "    #Ensure that the output after triggering differs from the clean data.\n",
    "    # (-) → I want to maximize this difference with the gradient.\n",
    "    target_pattern = trigger.unsqueeze(0).repeat(triggered_pred.size(0), 1, 1) if trigger.dim() == 2 else trigger\n",
    "    track_loss = torch.mean((triggered_pred - target_pattern) ** 2)\n",
    "    l2_reg = -torch.norm(trigger, p=2)\n",
    "    total_loss = alpha * div_loss + beta * track_loss + lambda_reg * l2_reg\n",
    "    return total_loss, div_loss, track_loss, l2_reg\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 12513485,
     "sourceId": 101039,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 18.829538,
   "end_time": "2025-08-21T20:00:23.150263",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-21T20:00:04.320725",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
